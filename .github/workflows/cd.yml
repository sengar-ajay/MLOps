name: Continuous Deployment

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [completed]
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.webapp-url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run model validation
        run: |
          python -c "
          import joblib
          import os

          # Validate model exists and can be loaded
          if os.path.exists('iris_model/model.pkl'):
              model = joblib.load('iris_model/model.pkl')
              print('Model loaded successfully')
          else:
              print('ERROR: Model file not found')
              exit(1)
              
          # Validate scaler exists and can be loaded
          if os.path.exists('data/scaler.pkl'):
              scaler = joblib.load('data/scaler.pkl')
              print('Scaler loaded successfully')
          else:
              print('ERROR: Scaler file not found')
              exit(1)
          "

      - name: Health check API
        run: |
          # Start the API in background for health check
          python src/api.py &
          API_PID=$!

          # Wait for API to start with retries
          echo "Waiting for API to start..."
          for i in {1..30}; do
            if curl -s http://localhost:5000/health > /dev/null 2>&1; then
              echo "API started successfully after ${i} seconds"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "API failed to start within 30 seconds"
              kill $API_PID 2>/dev/null || true
              exit 1
            fi
            sleep 1
          done

          # Health check
          echo "Running health check..."
          curl -f http://localhost:5000/health || exit 1

          # Stop the API
          kill $API_PID 2>/dev/null || true

          echo "API health check passed"

      - name: Deploy notification
        run: |
          echo "Deployment to staging completed successfully"
          echo "Model validation: Passed"
          echo "Health check: Passed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push-docker, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: ${{ steps.deploy.outputs.webapp-url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Production deployment validation
        run: |
          echo "Deploying to production..."
          echo "Tag: ${{ github.ref_name }}"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"

      - name: Run comprehensive model tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

          # Run comprehensive model validation
          python -c "
          import joblib
          import numpy as np
          import pandas as pd

          # Load and test model
          model = joblib.load('iris_model/model.pkl')
          scaler = joblib.load('data/scaler.pkl')

          # Create test data
          test_data = np.array([[8.3252, 41.0, 6.98, 1.02, 322.0, 2.56, 37.88, -122.23]])
          test_data_scaled = scaler.transform(test_data)
          prediction = model.predict(test_data_scaled)

          print(f'Model prediction test: {prediction[0]:.2f}')

          # Validate prediction is reasonable (for California housing)
          if 0.5 <= prediction[0] <= 15.0:
              print('Prediction within expected range')
          else:
              print('ERROR: Prediction outside expected range')
              exit(1)
          "

      - name: Production deployment notification
        run: |
          echo "Production deployment completed successfully!"
          echo "Version: ${{ github.ref_name }}"
          echo "Production environment is now live"

  model-monitoring:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run model monitoring
        run: |
          python src/monitoring.py --deployment-check

      - name: Generate deployment report
        run: |
          echo "# Deployment Report" > deployment-report.md
          echo "" >> deployment-report.md
          echo "- **Version**: ${{ github.ref_name }}" >> deployment-report.md
          echo "- **Deployment Time**: $(date -u)" >> deployment-report.md
          echo "- **Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "- **Environment**: Production" >> deployment-report.md
          echo "- **Status**: Successful" >> deployment-report.md

      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md
